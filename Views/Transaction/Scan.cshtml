@* Path: LedgerLink/Views/Transaction/Scan.cshtml *@
@{
    ViewData["Title"] = "Scan Customer Card";
}

<div class="container mt-5 text-center">
    <h2>@ViewData["Title"]</h2>
    <p class="text-muted">Hold the customer's QR code in front of the camera to begin a transaction.</p>

    <div id="reader" style="width: 100%; max-width: 500px; margin: 20px auto; border: 1px solid #ddd; border-radius: 8px; overflow: hidden;"></div>
    <p id="scan-status" class="mt-3 text-info">Initializing scanner...</p>
    <div id="scan-error" class="mt-3 text-danger" style="display: none;"></div>

    @* Manual Scan Again Button *@
    <button id="scanAgainButton" class="btn btn-secondary mt-3" style="display: none;">Scan Again</button>
</div>

@section Scripts {
    <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script>
        let html5QrcodeScanner; // Declare globally
        const readerDiv = document.getElementById('reader');
        const scanStatusP = document.getElementById('scan-status');
        const scanErrorDiv = document.getElementById('scan-error');
        const scanAgainButton = document.getElementById('scanAgainButton');

        // Function to handle successful QR code scan or server response
        async function onScanSuccess(decodedText, decodedResult) {
            scanStatusP.textContent = `Scanned: ${decodedText}. Looking up customer...`;
            scanErrorDiv.style.display = 'none';
            scanAgainButton.style.display = 'none'; // Hide scan again button

            // CRITICAL FIX: Stop and clear the scanner immediately after a successful decode.
            // This prevents re-scanning the same code repeatedly.
            if (html5QrcodeScanner.isScanning) {
                await html5QrcodeScanner.stop().then(() => {
                    console.log("QR Code scanner stopped after decode.");
                    readerDiv.style.display = 'none'; // Hide the camera feed
                }).catch(err => {
                    console.error("Error stopping QR Code scanner after decode:", err);
                });
            }

            try {
                const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

                const response = await fetch('/Transaction/ProcessScan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: JSON.stringify(decodedText)
                });

                if (response.ok) {
                    const data = await response.json();
                    if (data.customerId) {
                        scanStatusP.textContent = 'Customer found! Redirecting...';
                        window.location.href = `/Transaction/CustomerDetails/${data.customerId}`;
                    } else {
                        throw new Error('Customer ID not received from server.');
                    }
                } else {
                    const errorText = await response.text();
                    throw new Error(`Server error: ${response.status} - ${errorText}`);
                }
            } catch (error) {
                console.error('Error processing scan:', error);
                scanErrorDiv.textContent = `Error: ${error.message}. Please try again.`;
                scanErrorDiv.style.display = 'block';
                scanStatusP.textContent = 'Scan failed.';

                // CRITICAL FIX: Fully clear the scanner on error.
                // This stops the camera and prevents continuous re-scanning of the invalid code.
                if (html5QrcodeScanner) {
                    html5QrcodeScanner.clear().then(() => {
                        console.log("QR Code scanner cleared on error.");
                        readerDiv.style.display = 'none'; // Ensure camera feed is hidden
                        scanAgainButton.style.display = 'block'; // Show manual restart button
                    }).catch(err => {
                        console.error("Error clearing scanner on error:", err);
                        // Even if clear fails, show the button to allow manual retry
                        scanAgainButton.style.display = 'block';
                    });
                } else {
                    // Fallback if scanner wasn't initialized for some reason
                    scanAgainButton.style.display = 'block';
                }
            }
        }

        // Function to handle QR code scan errors (from html5-qrcode itself, before server interaction)
        function onScanError(errorMessage) {
            // This function is called continuously as the scanner tries to read.
            // Only update status, don't try to stop/clear here unless it's a critical scanner error.
            scanStatusP.textContent = 'Scanning... (Ensure QR code is clear)';
            scanErrorDiv.style.display = 'none'; // Hide error on continuous scan attempts
            scanAgainButton.style.display = 'none'; // Hide button while scanning
        }

        // Function to initialize/start the scanner
        function startScanner() {
            // Clear any previous scanner instance to ensure a clean start
            if (html5QrcodeScanner) {
                html5QrcodeScanner.clear().catch(err => console.error("Error clearing scanner on start:", err));
            }

            readerDiv.style.display = 'block'; // Show the reader div for camera feed
            scanStatusP.textContent = 'Initializing scanner...';
            scanErrorDiv.style.display = 'none';
            scanAgainButton.style.display = 'none';

            html5QrcodeScanner = new Html5QrcodeScanner(
                "reader",
                { fps: 10, qrbox: { width: 250, height: 250 } },
                false // Verbose logging
            );
            html5QrcodeScanner.render(onScanSuccess, onScanError);
        }

        // Start the scanner when the page loads
        window.onload = startScanner;

        // Event listener for the new "Scan Again" button
        scanAgainButton.addEventListener('click', startScanner);
    </script>
    @Html.AntiForgeryToken()
}